package anderson.tankwar;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.util.Random;

public class Tank {
	static final float XSPEED = 5;
	static final float YSPEED = 5;
	static final int WIDTH = 30;
	static final int HEIGHT = 30;
	private int x;
	private int y;
	private boolean bL=false;
	private boolean bR=false;
	private boolean bU=false;
	private boolean bD=false;
	private boolean good=false;
	private boolean live=true;
	private Random r=new Random();
	

	public enum Direction{UL,U,UR,L,STOP,R,DL,D,DR};
	private Direction dir=Direction.STOP;
	private Direction ptDir=Direction.D;
	private TankClient tc;

	public Tank(int x, int y,boolean good) {
		this.x = x;
		this.y = y;
		this.good=good;
	}
	public Tank(int x, int y ,boolean good,TankClient tc) {
		this.x = x;
		this.y = y;
		this.good=good;
		this.tc=tc;
	}
	public Tank(int x, int y ,boolean good,Direction dir,TankClient tc) {
		this.x = x;
		this.y = y;
		this.good=good;
		this.dir=dir;
		this.tc=tc;
	}
	public int getX() {
		return x;
	}
	public void setX(int x) {
		this.x = x;
	}
	public int getY() {
		return y;
	}
	public void setY(int y) {
		this.y = y;
	}
	public boolean isLive() {
		return live;
	}
	public void setLive(boolean live) {
		this.live = live;
	}
	public void draw(Graphics g){
		if(!live) {
			if(!good){
				tc.tanks.remove(this);
				return;
			}
		}
		
		Color c = g.getColor();
		if(good){
			g.setColor(Color.RED);	
		}else{
			g.setColor(Color.GREEN);
		}
		g.fillOval(x, y, WIDTH, HEIGHT);
		g.setColor(c);
		drawCanon(ptDir,g);
		move();
	}

	private void drawCanon(Direction ptDir,Graphics g) {
		Color c = g.getColor();
		g.setColor(Color.WHITE);
		switch (ptDir) {
		case U:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x+WIDTH/2, y);
			break;
		case D:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x+WIDTH/2, y+HEIGHT);
			break;
		case L:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x, y+HEIGHT/2);
			break;
		case UL:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x, y);
			break;
		case UR:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x+WIDTH, y);
			break;
		case R:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x+WIDTH, y+HEIGHT/2);
			break;
		case DL:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x, y+HEIGHT);
			break;
		case DR:
			g.drawLine(x+WIDTH/2,y+HEIGHT/2, x+WIDTH, y+HEIGHT);
			break;			
		}

	}
	private void move(){
		switch (dir) {
		case U:
			y-=XSPEED;
			break;
		case D:
			y+=XSPEED;
			break;
		case L:
			x-=XSPEED;
			break;
		case UL:
			x-=Math.sqrt(2)*XSPEED;
			y-=Math.sqrt(2)*YSPEED;
			break;
		case UR:
			x+=Math.sqrt(2)*XSPEED;
			y-=Math.sqrt(2)*YSPEED;
			break;
		case R:
			x+=XSPEED;
			break;
		case DL:
			x-=Math.sqrt(2)*XSPEED;
			y+=Math.sqrt(2)*YSPEED;
			break;
		case DR:
			x+=Math.sqrt(2)*XSPEED;
			y+=Math.sqrt(2)*YSPEED;
			break;			
		case STOP:
			break;
		}
		if(this.dir!=Direction.STOP){
			this.ptDir=this.dir;
		}
		
		if(x<0) x=0;
		if(y<30) y=30;
		if(x+Tank.WIDTH>TankClient.WIDTH) x=TankClient.WIDTH-Tank.WIDTH;
		if(y+Tank.HEIGHT>TankClient.HIGHT) y=TankClient.HIGHT-Tank.HEIGHT;
		
		if(!good){
			int i=0;
			if(i>2){
				Direction[] dirs=Direction.values();
				int rint=r.nextInt(dirs.length);
				dir=dirs[rint];
				i=0;
			}
			i++;
		}
	}

	public void currentPos(){
		System.out.println(System.currentTimeMillis()+" to: "+dir+" at:"+x+":"+y);
	}
	public void keyPressed(KeyEvent e){
		switch (e.getKeyCode()){
		case KeyEvent.VK_UP:
			bU=true;
			break;
		case KeyEvent.VK_DOWN:
			bD=true;
			break;
		case KeyEvent.VK_LEFT:
			bL=true;
			break;
		case KeyEvent.VK_RIGHT:
			bR=true;
			break;
		}
		locateDirection();
		//currentPos();
	}
	private void locateDirection(){
		if(bL&&!bU&&!bR&&!bD) dir=Direction.L;
		else if(!bL&&!bU&&bR&&!bD) dir=Direction.R;
		else if(!bL&&!bU&&!bR&&bD) dir=Direction.D;
		else if(!bL&&bU&&!bR&&!bD) dir=Direction.U;
		else if(bL&&bU&&!bR&&!bD) dir=Direction.UL;
		else if(!bL&&bU&&bR&&!bD) dir=Direction.UR;
		else if(bL&&!bU&&!bR&&bD) dir=Direction.DL;
		else if(!bL&&!bU&&bR&&bD) dir=Direction.DR;
		else if(!bL&&!bU&&!bR&&!bD) dir=Direction.STOP;
		
	}
	public void keyReleased(KeyEvent e) {
		switch (e.getKeyCode()){
		case KeyEvent.VK_F:
			tc.missiles.add(fireMissile());
			break;
		case KeyEvent.VK_UP:
			bU=false;
			break;
		case KeyEvent.VK_DOWN:
			bD=false;
			break;
		case KeyEvent.VK_LEFT:
			bL=false;
			break;
		case KeyEvent.VK_RIGHT:
			bR=false;
			break;
		}
		locateDirection();
	}

	public Missile fireMissile(){
		Missile m=new Missile(
				x+Tank.WIDTH/2-Missile.BULLET_RADIUS/2,
				y+Tank.HEIGHT/2-Missile.BULLET_RADIUS/2,
				ptDir,
				tc);
		return m;
	}
}
